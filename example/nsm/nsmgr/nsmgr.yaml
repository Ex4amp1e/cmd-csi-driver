---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nsmgr
  labels:
    app: nsmgr
spec:
  selector:
    matchLabels:
      app: nsmgr
  template:
    metadata:
      labels:
        app: nsmgr
        "spiffe.io/spiffe-id": "true"
    spec:
      serviceAccount: nsmgr-sa
      containers:
        - image: ghcr.io/networkservicemesh/ci/cmd-nsmgr:564af85
          imagePullPolicy: IfNotPresent
          name: nsmgr
          ports:
            - containerPort: 5001
              hostPort: 5001
          env:
            - name: SPIFFE_ENDPOINT_SOCKET
              value: unix:///spiffe-workload-api/agent.sock
            - name: NSM_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NSM_LOG_LEVEL
              value: TRACE
            - name: NSM_REGISTRY_URL
              value: "registry:5002"
            #            - name: DLV_LISTEN_NSMGR
            #              value: :40000
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NSM_LISTEN_ON
              value: unix:///var/lib/networkservicemesh/nsm.io.sock,tcp://:5001
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: spiffe-workload-api
              mountPath: /spiffe-workload-api
              readOnly: true
            - name: nsm-socket
              mountPath: /var/lib/networkservicemesh
            - name: exclude-prefixes-volume
              mountPath: /var/lib/networkservicemesh/config/
          resources:
            requests:
              cpu: 200m
              memory: 100Mi
            limits:
              memory: 200Mi
              cpu: 400m
          readinessProbe:
            exec:
              command: ["/bin/grpc-health-probe", "-spiffe", "-addr=:5001"]
          livenessProbe:
            exec:
              command: ["/bin/grpc-health-probe", "-spiffe", "-addr=:5001"]
        - image: ghcr.io/networkservicemesh/ci/cmd-exclude-prefixes-k8s:f28a209
          imagePullPolicy: IfNotPresent
          name: exclude-prefixes
          env:
            - name: NSM_LOG_LEVEL
              value: TRACE
          volumeMounts:
            - name: exclude-prefixes-volume
              mountPath: /var/lib/networkservicemesh/config/
          resources:
            limits:
              memory: 40Mi
              cpu: 75m
        # This is the container which runs the NSM CSI driver.
        - name: nsm-csi-driver
          image: localhost:5001/cmd-csi-driver:latest
          imagePullPolicy: IfNotPresent
          args: [
            "-nsm-socket-dir", "/nsm-socket",
            "-csi-socket-path", "/nsm-csi/csi.sock",
          ]
          env:
            # The CSI driver needs a unique node ID. The node name can be
            # used for this purpose.
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            # The volume containing the Network Service API socket.
            # The NSM CSI driver will mount this directory into containers.
            - mountPath: /nsm-socket
              name: nsm-socket
              readOnly: true
            # The volume that will contain the CSI driver socket shared
            # with the kubelet and the driver registrar.
            - mountPath: /nsm-csi
              name: nsm-csi-socket-dir
            # The volume containing mount points for containers.
            - mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
              name: mountpoint-dir
          securityContext:
            privileged: true
        # This container runs the CSI Node Driver Registrar which takes care
        # of all the little details required to register a CSI driver with
        # the kubelet.
        - name: node-driver-registrar
          image: quay.io/k8scsi/csi-node-driver-registrar:v2.0.1
          imagePullPolicy: IfNotPresent
          args: [
            "-csi-address", "/nsm-csi/csi.sock",
            "-kubelet-registration-path", "/var/lib/kubelet/plugins/csi.networkservicemesh.io/csi.sock",
          ]
          volumeMounts:
            # The registrar needs access to the NSM CSI driver socket
            - mountPath: /nsm-csi
              name: nsm-csi-socket-dir
            # The registrar needs access to the Kubelet plugin registration
            # directory
            - name: kubelet-plugin-registration-dir
              mountPath: /registration
      volumes:
        - name: spiffe-workload-api
          csi:
            driver: "csi.spiffe.io"
            readOnly: true
        - name: nsm-socket
          hostPath:
            path: /var/lib/networkservicemesh
            type: DirectoryOrCreate
        # This volume is where the socket for kubelet->driver communication lives
        - name: nsm-csi-socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/csi.networkservicemesh.io
            type: DirectoryOrCreate
        # This volume is where the NSM CSI driver mounts volumes
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        # This volume is where the node-driver-registrar registers the plugin
        # with kubelet
        - name: kubelet-plugin-registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry
            type: Directory
        - name: exclude-prefixes-volume
          emptyDir: {}
